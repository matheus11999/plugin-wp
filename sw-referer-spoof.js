/**
 * LinkGate Service Worker - Referer Spoofing
 * Intercepta requisi√ß√µes e modifica o header Referer
 */

console.log('üöÄ LinkGate Service Worker iniciado');

let spoofedReferer = null;
let targetUrl = null;
let targetHostname = null;

// Escuta mensagens da p√°gina principal
self.addEventListener('message', function(event) {
    console.log('üì® SW recebeu mensagem:', event.data);
    
    if (event.data.action === 'setSpoofConfig') {
        spoofedReferer = event.data.referer;
        targetUrl = event.data.targetUrl;
        targetHostname = event.data.hostname;
        console.log('üéØ Configura√ß√£o de spoofing definida:', {
            referer: spoofedReferer,
            targetUrl: targetUrl,
            hostname: targetHostname
        });
        
        // Confirma configura√ß√£o
        if (event.ports && event.ports[0]) {
            event.ports[0].postMessage({ success: true });
        }
    } else if (event.data.action === 'fetchWithSpoof') {
        // Faz requisi√ß√£o com referer spoofado e retorna o conte√∫do
        console.log('üéØ Fazendo requisi√ß√£o spoofada para:', event.data.url);
        
        const channel = new MessageChannel();
        
        fetch(event.data.url, {
            headers: {
                'Referer': spoofedReferer,
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            },
            mode: 'cors',
            credentials: 'omit'
        })
        .then(response => {
            console.log('‚úÖ Requisi√ß√£o spoofada bem-sucedida:', response.status);
            return response.text();
        })
        .then(html => {
            console.log('üìÑ Conte√∫do recebido, tamanho:', html.length);
            if (event.ports && event.ports[0]) {
                event.ports[0].postMessage({ 
                    success: true, 
                    html: html,
                    spoofedReferer: spoofedReferer
                });
            }
        })
        .catch(error => {
            console.error('‚ùå Erro na requisi√ß√£o spoofada:', error);
            if (event.ports && event.ports[0]) {
                event.ports[0].postMessage({ 
                    success: false, 
                    error: error.message 
                });
            }
        });
    }
});

// Intercepta TODAS as requisi√ß√µes para qualquer dom√≠nio
self.addEventListener('fetch', function(event) {
    const request = event.request;
    const url = new URL(request.url);
    
    // S√≥ loga requisi√ß√µes importantes para n√£o poluir o console
    if (request.mode === 'navigate' || (targetHostname && url.hostname === targetHostname)) {
        console.log('üîç SW interceptou:', {
            url: request.url,
            method: request.method,
            mode: request.mode,
            destination: request.destination,
            referer: request.headers.get('referer')
        });
    }
    
    // Intercepta requisi√ß√µes para o destino alvo
    if (targetHostname && url.hostname === targetHostname) {
        console.log('üéØ Interceptando requisi√ß√£o para destino alvo:', url.hostname);
        
        // Clona headers e adiciona referer spoofado
        const newHeaders = new Headers();
        
        // Copia headers existentes
        for (const [key, value] of request.headers.entries()) {
            if (key.toLowerCase() !== 'referer' && key.toLowerCase() !== 'referrer') {
                newHeaders.set(key, value);
            }
        }
        
        // Adiciona referer spoofado
        if (spoofedReferer) {
            newHeaders.set('Referer', spoofedReferer);
            console.log('üé≠ Referer spoofado aplicado:', spoofedReferer);
        }
        
        // Cria nova requisi√ß√£o
        const modifiedRequest = new Request(request.url, {
            method: request.method,
            headers: newHeaders,
            body: request.body,
            mode: request.mode === 'navigate' ? 'cors' : request.mode,
            credentials: 'omit',
            cache: request.cache,
            redirect: request.redirect
        });
        
        // Responde com a requisi√ß√£o modificada
        event.respondWith(
            fetch(modifiedRequest)
                .then(response => {
                    console.log('‚úÖ Requisi√ß√£o spoofada enviada:', response.status);
                    return response;
                })
                .catch(error => {
                    console.error('‚ùå Erro na requisi√ß√£o spoofada:', error);
                    // Fallback para requisi√ß√£o original sem spoofing
                    return fetch(request);
                })
        );
    }
});

// Evento de instala√ß√£o
self.addEventListener('install', function(event) {
    console.log('‚öôÔ∏è Service Worker instalado');
    // Pula a fase de espera e ativa imediatamente
    self.skipWaiting();
});

// Evento de ativa√ß√£o
self.addEventListener('activate', function(event) {
    console.log('‚úÖ Service Worker ativado');
    // Toma controle de todas as p√°ginas imediatamente
    event.waitUntil(self.clients.claim());
});

// Cleanup
self.addEventListener('beforeunload', function(event) {
    console.log('üßπ Service Worker cleanup');
    spoofedReferer = null;
    targetUrl = null;
    targetHostname = null;
});