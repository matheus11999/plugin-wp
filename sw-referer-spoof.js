/**
 * LinkGate Service Worker - Referer Spoofing
 * Intercepta requisi√ß√µes e modifica o header Referer
 */

console.log('üöÄ LinkGate Service Worker iniciado');

let spoofedReferer = null;
let targetHostname = null;

// Escuta mensagens da p√°gina principal
self.addEventListener('message', function(event) {
    console.log('üì® SW recebeu mensagem:', event.data);
    
    if (event.data.action === 'setSpoofConfig') {
        spoofedReferer = event.data.referer;
        targetHostname = event.data.hostname;
        console.log('üéØ Configura√ß√£o de spoofing definida:', {
            referer: spoofedReferer,
            hostname: targetHostname
        });
        
        // Confirma configura√ß√£o
        if (event.ports && event.ports[0]) {
            event.ports[0].postMessage({ success: true });
        }
    }
});

// Intercepta todas as requisi√ß√µes de navega√ß√£o
self.addEventListener('fetch', function(event) {
    const request = event.request;
    const url = new URL(request.url);
    
    // Log de debug para todas as requisi√ß√µes
    console.log('üîç SW interceptou requisi√ß√£o:', {
        url: request.url,
        method: request.method,
        mode: request.mode,
        destination: request.destination
    });
    
    // Verifica se √© uma requisi√ß√£o de navega√ß√£o para o destino alvo
    if (targetHostname && url.hostname === targetHostname && request.mode === 'navigate') {
        console.log('üéØ Interceptando navega√ß√£o para destino alvo:', url.hostname);
        
        // Cria uma nova requisi√ß√£o com referer spoofado
        const modifiedHeaders = new Headers(request.headers);
        
        if (spoofedReferer) {
            modifiedHeaders.set('Referer', spoofedReferer);
            modifiedHeaders.set('Referrer', spoofedReferer);
            console.log('üé≠ Referer spoofado aplicado:', spoofedReferer);
        }
        
        const modifiedRequest = new Request(request, {
            headers: modifiedHeaders
        });
        
        // Responde com a requisi√ß√£o modificada
        event.respondWith(
            fetch(modifiedRequest)
                .then(response => {
                    console.log('‚úÖ Requisi√ß√£o spoofada enviada com sucesso');
                    return response;
                })
                .catch(error => {
                    console.error('‚ùå Erro na requisi√ß√£o spoofada:', error);
                    // Fallback para requisi√ß√£o original
                    return fetch(request);
                })
        );
    }
    // Para outras requisi√ß√µes, deixa passar normalmente
    else {
        // S√≥ intercepta se for para o dom√≠nio alvo
        if (targetHostname && url.hostname === targetHostname) {
            console.log('üîÑ Passando requisi√ß√£o para o destino sem modifica√ß√£o');
        }
    }
});

// Evento de instala√ß√£o
self.addEventListener('install', function(event) {
    console.log('‚öôÔ∏è Service Worker instalado');
    // Pula a fase de espera e ativa imediatamente
    self.skipWaiting();
});

// Evento de ativa√ß√£o
self.addEventListener('activate', function(event) {
    console.log('‚úÖ Service Worker ativado');
    // Toma controle de todas as p√°ginas imediatamente
    event.waitUntil(self.clients.claim());
});

// Cleanup quando n√£o precisar mais
self.addEventListener('beforeunload', function(event) {
    console.log('üßπ Service Worker sendo limpo');
    spoofedReferer = null;
    targetHostname = null;
});